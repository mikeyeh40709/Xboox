@model XbooxCMS.ViewModels.CreateListViewModel
@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<head>
    <link href="https://unpkg.com/filepond/dist/filepond.css" rel="stylesheet" />
    <link href="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css" rel="stylesheet" />

</head>

<h2>Edit</h2>


<form id="editproducts">
    @*@Html.AntiForgeryToken()*@
    <div class="col-md-12">
        <div class="card card-4">
            <div class="card-body">
                <h2 class="title">Edit Product</h2>
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <input id="Id" name="Id" type="hidden" value=@Model.ProductId>

                @Html.HiddenFor(m => m.ProductId)
                <div class="row row-space">

                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">Product Name</label>
                            @*<input class="input-style-4" type="text" name="first_name">*@
                            @Html.TextBoxFor(m => m.Name, new { @class = "input-style-4 l-width", placeholder = "請輸入50字以內產品名稱" })
                            @Html.ValidationMessageFor(m => m.Name)
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">Product Price</label>
                            @*<input class="input-style-4" type="text" name="last_name">*@
                            @Html.TextBoxFor(m => m.Price, new { @class = "input-style-4 l-width", placeholder = "placeholder" })
                            @Html.ValidationMessageFor(m => m.Price)
                        </div>
                    </div>
                </div>
                <div class="row row-space">
                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">UnitInStock</label>
                            @Html.TextBoxFor(m => m.UnitInStock, new { @class = "input-style-4 l-width", placeholder = "placeholder" })
                            @Html.ValidationMessageFor(m => m.UnitInStock)
                        </div>
                    </div>

                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">PublishedDate</label>
                            <div class="input-group-icon">
                                @Html.TextBoxFor(m => m.PublishedDate, "{0:2020-MM-dd}", new { type = "date", @class = "input-style-4 l-width" })
                                @Html.ValidationMessageFor(m => m.PublishedDate)
                            </div>
                        </div>

                    </div>
                </div>
                <div class="row row-space">
                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">Author</label>
                            @Html.TextBoxFor(m => m.Author, new { @class = "input-style-4 l-width", placeholder = "placeholder" })
                            @Html.ValidationMessageFor(m => m.Author)
                        </div>
                    </div>

                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">Language</label>
                            @Html.TextBoxFor(m => m.Language, new { @class = "input-style-4 l-width", placeholder = "placeholder" })
                            @Html.ValidationMessageFor(m => m.Language)
                        </div>
                    </div>

                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">Intro</label>
                            @Html.TextBoxFor(m => m.Intro, new { @class = "input-style-4 l-width", placeholder = "placeholder" })
                            @Html.ValidationMessageFor(m => m.Intro)
                        </div>
                    </div>

                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">Category</label>
                            @Html.DropDownListFor(m => m.CategoryId, new SelectList(Model.CategoryViewModels, "CategoryId", "Name"), new { @class = "input-style-4 l-width l-height" })
                        </div>
                    </div>
                    <div class="col-6 ">
                        <div class="input-group">
                            <label class="label">Tag (Multiple Choice)</label>
                            @Html.CheckBoxListFor(model => model.PostedTagIds,
                                        model => model.Tags,
                                        entity => entity.TagId,
                                        entity => entity.TagName,
                                        model => model.SelectedTags
                                        //(model, entity) => model.Tags.Contains(entity.TagId)
                 )
                        </div>
                    </div>
                </div>
                <div class="row row-space">
                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">Spec</label>
                            @Html.TextBoxFor(m => m.Specification, new { @class = "input-style-4 l-width ", placeholder = "placeholder" })
                            @Html.ValidationMessageFor(m => m.Specification)
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">ISBN</label>
                            @Html.TextBoxFor(m => m.ISBN, new { @class = "input-style-4 l-width", placeholder = "placeholder" })
                            @Html.ValidationMessageFor(m => m.ISBN)
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">Picture</label>
                            <input type="file"
                                   id="filepond"
                                   class="filepond"
                                   name="filepond"
                                   multiple
                                   allowRevert="false"
                                   @*allowRemove ="false"*@
                                   data-allow-reorder="true"
                                   data-max-file-size="3MB"
                                   data-max-files="5">
                        </div>
                    </div>
                    <div class="col-12">
                        <div class="picture-group" data-pid="@Model.ProductId">

                        </div>
                    </div>
                    <div class="col-12 pd-50 " id="div1">
                        @Html.TextAreaFor(m => m.Description, new { @id = "text1" })
                    </div>


                </div>

                <div class="p-t-15">
                    <button class="btn btn-beige" type="submit" id="saveBtn">Save</button>
                </div>
            </div>
        </div>
    </div>
</form>


<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
<script src="https://unpkg.com/filepond/dist/filepond.js"></script>
<script src="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js"></script>
<script src="https://unpkg.com/filepond-plugin-file-encode/dist/filepond-plugin-file-encode.js"></script>
<script src="https://unpkg.com/filepond-plugin-image-exif-orientation/dist/filepond-plugin-image-exif-orientation.js"></script>
<script defer src="https://code.getmdl.io/1.3.0/material.min.js"></script>
<script type="text/javascript" src="https://unpkg.com/wangeditor/release/wangEditor.min.js"></script>
@Scripts.Render("~/bundles/jqueryval")

<script type="text/javascript">


    FilePond.registerPlugin(

        // encodes the file as base64 data
        FilePondPluginFileEncode,

        // validates the size of the file
        //FilePondPluginFileValidateSize,

        // corrects mobile image orientation
        FilePondPluginImageExifOrientation,

        // previews dropped images
        FilePondPluginImagePreview
    );

    // Select the file input and use create() to turn it into a pond
    FilePond.create(
        document.querySelector('#filepond')
    );

</script>
<script>


    FilePond.setOptions({

        server: {
            process: '/api/img',
            revert: (source, load, error) => {
                console.log('remove');
                let formData = new FormData();
                formData.append('ccc', source);
                fetch(`/Product/Remove?abc=${source}`, {
                    body: formData,
                    headers: {
                        //'content-type': 'multipart/form-data'
                    },
                    method: 'POST', // *GET, POST, PUT, DELETE, etc.
                })
                    .then((result) => {
                        console.log("remove", source);
                    })

                error('oh my goodness');

                load();
            }
        }
    });
</script>
<script>

    window.addEventListener("load", function () {
        var deleteElement;
        //load的的時候街上url
        var pId = document.querySelector('.picture-group').attributes['data-pid'].value;
        console.log(pId);


        var url = `/api/product/${pId}`;
        //   var data = { username: 'example' };

        fetch(url, {
            method: 'GET',

            headers: new Headers({
                'Content-Type': 'application/json'
            })
        })
            // .then(res => res.json())

            .then((response) => {

                return response.json();

                console.log('Success:', response)
            })
            .then(data => {
                console.log(data.data)
                const div = document.querySelector('.picture-group');

                for (var item of data) {
                    var closeBtn = this.document.createElement('Button');
                    var div_pic = this.document.createElement('div');
                    //div_pic.classList.add(`${item}`);
                    div.appendChild(div_pic);
                    closeBtn.innerHTML = "X";
                    closeBtn.classList.add("closebtn");
                    closeBtn.id = item;
                    closeBtn.type = 'button';
                    //  closeBtn.setAttribute("onclick", `removeImg(${encodeURI(item)})`);
                    var img = this.document.createElement('Img');
                    img.classList.add("pic_size");

                    img.src = item;

                    div_pic.appendChild(img);
                    div_pic.appendChild(closeBtn);

                    deleteElement = document.querySelectorAll(".closebtn");
                    console.log(deleteElement);
                    deleteElement.forEach(x => x.addEventListener('click', function () { removeImg(this.id); }))

                }

            })


        function removeImg(imgName) {

            fetch(`/api/img/DeleteImg?query="${imgName}"`, {

                method: 'DELETE',
                body: JSON.stringify({ id: imgName }),
                headers: new Headers({
                    'Content-Type': 'application/json'
                })
            })
                .then((response) => {

                    //return response.json();

                    console.log('Success:', response)

                    var removeDiv = document.querySelector(`img[src="${imgName}"`);
                    removeDiv && removeDiv.parentNode && removeDiv.parentNode.remove();
                })
                .catch((err) => {
                    console.log(err);
                    alert("Wrong");
                })

        }


    });


    $("form").on("submit", function (event) {
        event.preventDefault();
        //alert($(this).serialize());
        $('form').validate();
        if ($('input[name="PostedTagIds"]:checked').length == 0) {
            alert("至少勾選一項tag");

        }
        else if ($("form").valid()) {
            alert("創建成功");
            /* Add code for Ajax post */
            $.ajax({
                type: "PUT",
                url: '/api/product',
                data: $(this).serialize(),

                contentType: 'application/x-www-form-urlencoded; charset=utf-8',

                success: function (data) {
                    console.log("Success create", data);
                    window.location.href = '/product';
                },

                error: function (xhr) {
                    alert('fails');

                }


            })
        }

        else {
            alert("請輸入必要欄位");
        }
      

    });


    //將editor客製化為textrea
    var E = window.wangEditor
    var editor = new E('#div1')
    var $text1 = $('#text1')
    editor.customConfig.onchange = function (html) {

        $text1.val(html)
    }
    editor.create()

    $text1.val(editor.txt.html())


</script>
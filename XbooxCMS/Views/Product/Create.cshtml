@model XbooxCMS.ViewModels.CreateListViewModel
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<head>
    <link href="https://unpkg.com/filepond/dist/filepond.css" rel="stylesheet" />
    <link href="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="https://code.getmdl.io/1.3.0/material.indigo-pink.min.css">
    <link href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-bs4.min.css" rel="stylesheet">

</head>


<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="col-md-12">
   
        <div class="card card-4">
            <div class="card-body">
                <h2 class="title">CREATE PRODUCT</h2>
                <div class="row row-space">
                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">Product Name</label>
                            @*<input class="input-style-4" type="text" name="first_name">*@
                            @Html.TextBoxFor(m => m.Products.Name, new { @class = "input-style-4 l-width", placeholder = "請輸入50字以內產品名稱" })
                            @Html.ValidationMessageFor(m => m.Products.Name)
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">Product Price</label>
                            @*<input class="input-style-4" type="text" name="last_name">*@
                            @Html.TextBoxFor(m => m.Products.Price, new { @class = "input-style-4 l-width", placeholder = "placeholder" })
                            @Html.ValidationMessageFor(m => m.Products.Price)
                        </div>
                    </div>
                </div>
                <div class="row row-space">
                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">UnitInStock</label>
                            @Html.TextBoxFor(m => m.Products.UnitInStock, new { @class = "input-style-4 l-width", placeholder = "placeholder" })
                            @Html.ValidationMessageFor(m => m.Products.UnitInStock)
                        </div>
                    </div>

                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">PublishedDate</label>
                            <div class="input-group-icon">
                                @Html.TextBoxFor(m => m.Products.PublishedDate, "{0:2020-MM-dd}", new { type = "date", @class = "input-style-4 l-width" })
                                @Html.ValidationMessageFor(m => m.Products.PublishedDate)
                            </div>
                        </div>

                    </div>
                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">Publisher</label>
                            @Html.TextBoxFor(m => m.Products.Publisher, new { @class = "input-style-4 l-width", placeholder = "placeholder" })
                            @Html.ValidationMessageFor(m => m.Products.Publisher)
                        </div>
                    </div>

                </div>
                <div class="row row-space">
                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">Author</label>
                            @Html.TextBoxFor(m => m.Products.Author, new { @class = "input-style-4 l-width", placeholder = "placeholder" })
                            @Html.ValidationMessageFor(m => m.Products.Author)
                        </div>
                    </div>

                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">Language</label>
                            @Html.TextBoxFor(m => m.Products.Language, new { @class = "input-style-4 l-width", placeholder = "placeholder" })
                            @Html.ValidationMessageFor(m => m.Products.Language)
                        </div>
                    </div>

                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">Intro</label>
                            @Html.TextBoxFor(m => m.Products.Intro, new { @class = "input-style-4 l-width", placeholder = "placeholder" })
                            @Html.ValidationMessageFor(m => m.Products.Intro)
                        </div>
                    </div>

                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">Category</label>
                            @Html.DropDownListFor(m => m.Products.CategoryId, new SelectList(Model.Categories, "CategoryId", "Name"), new { @class = "input-style-4 l-width l-height" })
                        </div>
                    </div>
                    <div class="col-6 ">
                        <div class="input-group">
                            <label class="label">Tag (Multiple Choice)</label>
                            @Html.CheckBoxListFor(model => model.PostedTagIds,
                                        model => model.Tags,
                                        entity => entity.TagId,
                                        entity => entity.TagName,
                                        model => model.SelectedTags
                                        //(model, entity) => model.Tags.Contains(entity.TagId)
                 )
                        </div>
                    </div>
                </div>
                <div class="row row-space">
                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">Spec</label>
                            @Html.TextBoxFor(m => m.Products.Specification, new { @class = "input-style-4 l-width ", placeholder = "placeholder" })
                            @Html.ValidationMessageFor(m => m.Products.Specification)
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">ISBN</label>
                            @Html.TextBoxFor(m => m.Products.ISBN, new { @class = "input-style-4 l-width", placeholder = "placeholder" })
                            @Html.ValidationMessageFor(m => m.Products.ISBN)
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="input-group">
                            <label class="label">Picture</label>
                            <input type="file"
                                   id="filepond"
                                   class="filepond"
                                   name="filepond"
                                   multiple
                                   allowRevert="false"
                                   @*allowRemove ="false"*@
                                   data-allow-reorder="true"
                                   data-max-file-size="3MB"
                                   data-max-files="5">
                        </div>


                    </div>
                    <div class="col-12 ">
                        @Html.TextAreaFor(m => m.Description, new { @id= "summernote" })
                    </div>


                </div>

                <div class="p-t-15">
                    <button class="btn btn-beige" type="submit" >Create</button>
                </div>

            </div>
        </div>
    </div>

}
@*@Scripts.Render("~/bundles/jqueryval")*@

<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
<script src="https://unpkg.com/filepond/dist/filepond.js"></script>
<script src="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js"></script>
<script src="https://unpkg.com/filepond-plugin-file-encode/dist/filepond-plugin-file-encode.js"></script>
<script src="https://unpkg.com/filepond-plugin-image-exif-orientation/dist/filepond-plugin-image-exif-orientation.js"></script>
<script defer src="https://code.getmdl.io/1.3.0/material.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-bs4.min.js"></script>


<script type="text/javascript">


    FilePond.registerPlugin(

        // encodes the file as base64 data
        FilePondPluginFileEncode,

        // validates the size of the file
        //FilePondPluginFileValidateSize,

        // corrects mobile image orientation
        FilePondPluginImageExifOrientation,

        // previews dropped images
        FilePondPluginImagePreview
    );

    // Select the file input and use create() to turn it into a pond
    FilePond.create(
        document.querySelector('#filepond')
    );

</script>
<script>
  //  const formData = new formData();
    FilePond.setOptions({

        //server: '@Url.Action("Upload", "Product")'
        server: {
            process: '@Url.Action("Upload", "Product")',
            revert: (source, load, error) => {
                console.log('remove');
                // Should somehow send `source` to server so server can remove the file with this source
                let formData = new FormData();
                formData.append('ccc', source);
                fetch(`/Product/Remove?abc=${source}`, {
                    body: formData,
                    headers: {
                        //'content-type': 'multipart/form-data'
                    },
                    method: 'POST', // *GET, POST, PUT, DELETE, etc.
                })
                .then((result) => {
                    console.log("remove", source);
                })

                // Can call the error method if something is wrong, should exit after
                error('oh my goodness');

                // Should call the load method when done, no parameters required
                load();
            }
        }
    });
</script>
<script>

    $('#summernote').summernote({
        placeholder: 'Books Content...',
        tabsize: 2,
        height: 200
    });
</script>

